version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: teletype_db
      POSTGRES_USER: teletype_user
      POSTGRES_PASSWORD: teletype_pass
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U teletype_user -d teletype_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3-management-alpine
    environment:
      RABBITMQ_DEFAULT_USER: teletype_user
      RABBITMQ_DEFAULT_PASS: teletype_pass
    ports:
      - "5672:5672"
      - "15672:15672"  # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      DATABASE_URL: postgresql://teletype_user:teletype_pass@postgres:5432/teletype_db
      REDIS_URL: redis://redis:6379
      CELERY_BROKER_URL: amqp://teletype_user:teletype_pass@rabbitmq:5672//
      SECRET_KEY: your-super-secret-key-change-in-production
      ENVIRONMENT: development
      CORS_ORIGINS: "http://localhost:3000,http://127.0.0.1:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - backend_uploads:/app/uploads
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    restart: unless-stopped

  # Celery Worker
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgresql://teletype_user:teletype_pass@postgres:5432/teletype_db
      REDIS_URL: redis://redis:6379
      CELERY_BROKER_URL: amqp://teletype_user:teletype_pass@rabbitmq:5672//
      SECRET_KEY: your-super-secret-key-change-in-production
      ENVIRONMENT: development
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./backend:/app
    command: celery -A app.core.celery worker --loglevel=info
    restart: unless-stopped

  # Celery Beat (Scheduler)
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgresql://teletype_user:teletype_pass@postgres:5432/teletype_db
      REDIS_URL: redis://redis:6379
      CELERY_BROKER_URL: amqp://teletype_user:teletype_pass@rabbitmq:5672//
      SECRET_KEY: your-super-secret-key-change-in-production
      ENVIRONMENT: development
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./backend:/app
    command: celery -A app.core.celery beat --loglevel=info
    restart: unless-stopped

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000
      NEXT_PUBLIC_APP_URL: http://localhost:3000
      NODE_ENV: development
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    command: npm run dev
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  backend_uploads:

networks:
  default:
    name: teletype_network
